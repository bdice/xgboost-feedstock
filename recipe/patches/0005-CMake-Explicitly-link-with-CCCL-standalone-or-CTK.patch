From 6e58a81cf201d27c3acb304cdcd991cd46aa421f Mon Sep 17 00:00:00 2001
From: Hyunsu Cho <phcho@nvidia.com>
Date: Wed, 24 Jul 2024 12:25:04 -0700
Subject: [PATCH] [CMake] Explicitly link with CCCL (standalone or CTK)

Also allow building with CCCL that's newer than CTK

Co-authored-by: jakirkham <jakirkham@gmail.com>
---
 CMakeLists.txt    | 18 ++++++++++++++++++
 cmake/Utils.cmake |  6 +++---
 2 files changed, 21 insertions(+), 3 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index dc0f7e654..aa078405f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -224,6 +224,24 @@ if(USE_CUDA)
   add_subdirectory(${PROJECT_SOURCE_DIR}/gputreeshap)
 
   find_package(CUDAToolkit REQUIRED)
+  find_package(CCCL CONFIG)
+  if(NOT CCCL_FOUND)
+    message(STATUS "Standalone CCCL not found. Attempting to use CCCL from CUDA Toolkit...")
+    find_package(CCCL CONFIG
+      HINTS ${CUDAToolkit_LIBRARY_DIR}/cmake)
+    if(NOT CCCL_FOUND)
+      message(STATUS "Could not locate CCCL from CUDA Toolkit. Using Thrust and CUB from CUDA Toolkit...")
+      find_package(libcudacxx CONFIG REQUIRED
+        HINTS ${CUDAToolkit_LIBRARY_DIR}/cmake)
+      find_package(CUB CONFIG REQUIRED
+        HINTS ${CUDAToolkit_LIBRARY_DIR}/cmake)
+      find_package(Thrust CONFIG REQUIRED
+        HINTS ${CUDAToolkit_LIBRARY_DIR}/cmake)
+      thrust_create_target(Thrust HOST CPP DEVICE CUDA)
+      add_library(CCCL::CCCL INTERFACE IMPORTED GLOBAL)
+      target_link_libraries(CCCL::CCCL INTERFACE libcudacxx::libcudacxx CUB::CUB Thrust)
+    endif()
+  endif()
 endif()
 
 if(FORCE_COLORED_OUTPUT AND (CMAKE_GENERATOR STREQUAL "Ninja") AND
diff --git a/cmake/Utils.cmake b/cmake/Utils.cmake
index 8659df7c3..c1f19fdbb 100644
--- a/cmake/Utils.cmake
+++ b/cmake/Utils.cmake
@@ -108,12 +108,12 @@ function(xgboost_set_cuda_flags target)
     target_compile_definitions(${target} PRIVATE -DXGBOOST_USE_NVTX=1)
   endif()
 
+  target_link_libraries(${target}
+    PRIVATE CCCL::CCCL CUDA::cudart_static)
   target_compile_definitions(${target} PRIVATE -DXGBOOST_USE_CUDA=1)
   target_include_directories(
     ${target} PRIVATE
-    ${xgboost_SOURCE_DIR}/gputreeshap
-    ${xgboost_SOURCE_DIR}/rabit/include
-    ${CUDAToolkit_INCLUDE_DIRS})
+    ${xgboost_SOURCE_DIR}/gputreeshap)
 
   if(MSVC)
     target_compile_options(${target} PRIVATE
-- 
2.34.1

